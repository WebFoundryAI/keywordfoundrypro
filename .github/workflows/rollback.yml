# ISSUE FIX #9: Automated rollback workflow for CI/CD
#
# This workflow allows manual deployment rollback via GitHub Actions

name: Rollback Deployment

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to rollback to (e.g., v1.1.0)'
        required: true
        type: string
      environment:
        description: 'Environment to rollback'
        required: true
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip tests (emergency rollback only)'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  deployments: write

jobs:
  validate:
    name: Validate Rollback Request
    runs-on: ubuntu-latest
    outputs:
      version_exists: ${{ steps.check.outputs.exists }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for tags

      - name: Check if version exists
        id: check
        run: |
          if git tag -l | grep -q "^${{ inputs.version }}$"; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "✅ Version ${{ inputs.version }} found"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "❌ Version ${{ inputs.version }} not found"
            echo "Available versions:"
            git tag -l --sort=-version:refname | head -10
            exit 1
          fi

  rollback:
    name: Execute Rollback
    runs-on: ubuntu-latest
    needs: validate
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout target version
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.version }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        if: ${{ !inputs.skip_tests }}
        run: |
          echo "Running unit tests..."
          npm test -- --run
        continue-on-error: false

      - name: Build application
        run: npm run build

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Deploy Edge Functions
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
        run: |
          echo "Deploying Edge Functions from ${{ inputs.version }}..."

          # Link to project
          supabase link --project-ref $SUPABASE_PROJECT_ID

          # Deploy each function
          for func in supabase/functions/*; do
            if [ -d "$func" ]; then
              func_name=$(basename "$func")
              echo "Deploying $func_name..."
              supabase functions deploy "$func_name" --no-verify-jwt || echo "Failed to deploy $func_name"
            fi
          done

      - name: Deploy to hosting
        run: |
          # Add your deployment command here
          # Examples:
          # - Vercel: vercel --prod
          # - Netlify: netlify deploy --prod
          # - AWS: aws s3 sync dist/ s3://your-bucket
          echo "Deploying to ${{ inputs.environment }}..."
          # npm run deploy:${{ inputs.environment }}

      - name: Health check
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30

          # Check application health
          # Adjust URL based on your environment
          if [ "${{ inputs.environment }}" == "production" ]; then
            HEALTH_URL="https://keywordfoundrypro.com/health"
          else
            HEALTH_URL="https://staging.keywordfoundrypro.com/health"
          fi

          echo "Checking $HEALTH_URL..."
          for i in {1..5}; do
            if curl -f -s "$HEALTH_URL" > /dev/null; then
              echo "✅ Health check passed"
              exit 0
            fi
            echo "Attempt $i failed, retrying in 10s..."
            sleep 10
          done

          echo "❌ Health check failed after 5 attempts"
          exit 1

      - name: Create rollback tag
        run: |
          ROLLBACK_TAG="rollback-$(date +%Y%m%d-%H%M%S)-to-${{ inputs.version }}"
          git tag -a "$ROLLBACK_TAG" -m "Rollback to ${{ inputs.version }} in ${{ inputs.environment }}"
          git push origin "$ROLLBACK_TAG"

      - name: Notify on success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "✅ Rollback completed successfully",
              attachments: [{
                color: 'good',
                text: `Rollback to ${{ inputs.version }} in ${{ inputs.environment }} completed successfully by ${{ github.actor }}`
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "❌ Rollback failed",
              attachments: [{
                color: 'danger',
                text: `Rollback to ${{ inputs.version }} in ${{ inputs.environment }} failed. Manual intervention required.`
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  post-rollback:
    name: Post-Rollback Checks
    runs-on: ubuntu-latest
    needs: rollback
    if: ${{ !inputs.skip_tests }}
    steps:
      - name: Checkout target version
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.version }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests
        run: |
          echo "Running integration tests against ${{ inputs.environment }}..."
          # npm run test:integration:${{ inputs.environment }}
        continue-on-error: true

      - name: Monitor error rates
        run: |
          echo "Monitoring error rates for 5 minutes..."
          # Add your monitoring script here
          # Example: Check error logs, APM, etc.

      - name: Create incident report
        if: failure()
        run: |
          cat > incident-report.md <<EOF
          # Rollback Incident Report

          **Date:** $(date)
          **Environment:** ${{ inputs.environment }}
          **Target Version:** ${{ inputs.version }}
          **Operator:** ${{ github.actor }}

          ## Status
          ❌ Post-rollback checks failed

          ## Actions Taken
          1. Rolled back to version ${{ inputs.version }}
          2. Deployed Edge Functions
          3. Health checks: $([ "$?" -eq "0" ] && echo "✅ Passed" || echo "❌ Failed")

          ## Next Steps
          - [ ] Investigate rollback test failures
          - [ ] Check application logs
          - [ ] Verify database state
          - [ ] Consider additional rollback or restoration

          ## Timeline
          - Rollback initiated: ${{ github.event.created_at }}
          - Rollback completed: $(date)

          EOF

          echo "Incident report created"
          cat incident-report.md

      - name: Upload incident report
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: incident-report
          path: incident-report.md
